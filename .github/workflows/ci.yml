name: Rust

on:
  push:
  release:
    types: [created]

env:
  CARGO_TERM_COLOR: always

defaults:
  run:
    # necessary for windows
    shell: bash

jobs:
  build:
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        target: [x86_64-unknown-linux-musl, x86_64-unknown-linux-gnu]
        runs-on: [ubuntu-latest]
        cross: [true]
        include:
          - target: x86_64-apple-darwin
            runs-on: macos-latest # Apple needs to be compiled on an apple os
            cross: false # Cross fails on these platforms
          - target: x86_64-pc-windows-gnu
            runs-on: ubuntu-latest # Not needed, but why not?
            suffix: .exe # Windows has an .exe suffix
            cross: false # Cross fails on these platforms

    steps:
    - uses: actions/checkout@v2

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        components: rustfmt
        target: ${{ matrix.target }}

    - name: Install mingw compiler
      if: matrix.target == 'x86_64-pc-windows-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-mingw-w64

    - name: Install Cross
      run: cargo install cross

    - name: Build Binary
      run: cross build --profile release --target ${{ matrix.target }}

    - name: Save Artifact
      uses: actions/upload-artifact@v4
      with:
        name: dbimport-${{ matrix.target }}${{ matrix.suffix }}
        path: target/${{ matrix.target }}/release/dbimport${{ matrix.suffix }}

    - name: Upload Binary
      if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          asset_name: dbimport-${{ matrix.target }}${{ matrix.suffix }}
          asset_path: target/${{ matrix.target }}/release/dbimport${{ matrix.suffix }}
          upload_url: ${{ github.event.release.upload_url }}
          asset_content_type: application/octet-stream

  clippy_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: rustup component add clippy
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

  rustfmt:
    name: rustfmt
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        components: rustfmt
    - name: Check formatting
      run: |
        cargo fmt --all -- --check
